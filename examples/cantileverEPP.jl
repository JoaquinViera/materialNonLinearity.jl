# ===============================================
# Cantilever with elasto plastic material model 
# ===============================================

# Load solver module
using materialNonLinearity, Plots, LinearAlgebra, Polynomials

# example name
problemName = "CantileverEPP"

# Define material model
# =======================================
E = 210e6
σY = 250e3
K = -E / 100
ne = 16
ns = 16

# Materials struct
StrMaterialModels = IsotropicBiLinear(E, σY, K, ne, ns)

# Define section
# =======================================
b = 0.1
h = 0.1

# Section struct
StrSections = Rectangle(; b, h)

# Define Mesh
# =======================================

# Nodes
L = 1
# nnodes = 101
nnodes = 3
xcoords = collect(LinRange(0, L, nnodes))
#t = 0:1/(nnodes-1):1
#xcoords = t .^ 1.5 * L
ycoords = zeros(length(xcoords))
Nodes = hcat(xcoords, ycoords)

# Conec
elemConec = []
for i in 1:(nnodes-1)
    global elemConec = vcat(elemConec, (i, i + 1))
end

nelems = nnodes - 1
matVec = ones(nelems)
secVec = ones(nelems)
Conec = hcat(matVec, secVec, elemConec)

# Mesh struct
StrMesh = Mesh(Nodes, Conec)

# Boundary conditions
# =======================================

# Define Supports
supps = [1 Inf Inf Inf]

# Define applied external loads
Fx = 0
Fz = -1
My = 0
nod = nnodes
nodalForces = [nod Fx Fz My]

# BoundaryConds struct
StrBoundaryConds = BoundaryConds(supps, nodalForces)

# Numerical method parameters
# =======================================

tolk = 50 # number of iters
tolu = 1e-7 # Tolerance of converged disps
tolf = 1e-6 # Tolerance of internal forces

initialDeltaLambda = 1e-2 #

arcLengthIncrem = vcat(ones(18) * 1e-3, ones(80) * 1e-4) # 21 nodes
arcLengthIncrem = vcat(ones(28) * 1e-3, ones(23) * 1e-4, ones(200) * 1e-5) # 51 nodes
arcLengthIncrem = vcat(ones(39) * 1e-3, ones(21) * 1e-4, ones(30) * 1e-5) # 101 nodes
arcLengthIncrem = vcat(ones(3) * 1e-3) # prueba

nLoadSteps = length(arcLengthIncrem) # Number of load increments
#nLoadSteps = 1 # Number of load increments
controlDofs = [6] #
scalingProjection = 1 #

# Numerical method settings struct
StrAnalysisSettings = ArcLength(tolk, tolu, tolf, nLoadSteps, initialDeltaLambda, arcLengthIncrem, controlDofs, scalingProjection)



# Stress Array
# =======================================
elems = []
xG_Rel_Ind = 0

StrStressArray = StressArraySets(elems, xG_Rel_Ind)

# ===============================================
# Process model parameters
# ===============================================

sol, time, IterData = solver(StrSections, StrMaterialModels, StrMesh, StrBoundaryConds, StrAnalysisSettings, problemName, StrStressArray)


println(IterData.stopCrit)
#using BenchmarkTools

#@btime solver($StrSections, $StrMaterialModels, $StrMesh, $StrBoundaryConds, $StrAnalysisSettings, problemName)

# Post process
# --------------------------------
P = abs(Fz)
Iy = StrSections.Iy

# Analytical solution
Man = P * L
fan = P * L^3 / (3 * E * Iy)
theta_an = P * L^2 / (2 * E * Iy)
kappae = 2 * σY / (E * h)

# Numerical solution
matFint = sol.matFint
matUk = sol.matUk

# Clamped node
nod = 1
elem = 1
dofM = 3

# Loaded node
dofD = nnodes * 3 - 1
dofT = nnodes * 3

# Reaction Bending moment 
mVec = hcat([i[dofM] for i in matFint[elem]])
# Mnum = mVec[2]

# Displacements at loaded node
#deltaNum = matUk[dofD, 2]
#thetaNum = matUk[dofT, 2]
#=
dVec = abs.(matUk[dofD, :])
factors = sol.loadFactors
factors[2] = initialDeltaLambda
pVec = zeros(length(factors))
pVec[2] = P * initialDeltaLambda

for i in 2:(length(factors))
    pVec[i] = factors[i] + pVec[i-1]
end
=#
# Compute curvatures
# --------------------------------

kappaHistElem = frame_curvature(nelems, StrMesh, nLoadSteps, matUk)

# Analytical solution M-κ
# --------------------------------

Mana = zeros(nLoadSteps)
C = E * K / (E + K)
epsY = σY / E
eps_ast = epsY - σY / C
kappa_ast = 2 * eps_ast / h
elem = 1
for i in 1:nLoadSteps
    kappak = abs(kappaHistElem[elem, i])
    if kappak <= kappae
        Mana[i] = E * StrSections.Iy * kappak
    elseif kappak <= kappa_ast
        Mana[i] = σY * b * h^2 / 12 * (3 - kappae^2 / kappak^2 + kappak / kappae * C / E * (2 - 3 * kappae / kappak + kappae^3 / kappak^3))
    else
        zy = epsY / kappak
        z0 = eps_ast / kappak
        zs = z0 - zy
        Mana[i] = 2 * zy^2 * σY * b / 3 + zs * σY * b * (zy + (z0 - zy) / 3)
    end
end

My = σY * b * h^2 / 6

# Plot parameters
# =======================================
lw = 3
ms = 2
color = "black"
minorGridBool = 1
legend_pos = :topright

strPlots = PlotSettings(lw, ms, color, minorGridBool, legend_pos)

# M-κ plot
# --------------------------------

fig = plot(abs.(kappaHistElem[elem, :]), Mana, markershape=:circle, lw=lw, ms=ms, title="M-κ", label="Analytic", minorgrid=1, draw_arrow=1, legend=:bottomright)
plot!(fig, abs.(kappaHistElem[elem, :]), abs.(mVec), markershape=:rect, lw=lw, ms=ms, label="FEM")
xlabel!("κ")
ylabel!("M")

savefig(fig, "ejemplo3M-k.png")

err = (abs.(mVec[2:end]) - Mana[2:end]) ./ Mana[2:end] * 100
maxErrMk = maximum(err)

# Bending moment plot
# --------------------------------

using Plots
include("../src/Utils/plots.jl")

ndivs = 2
timesPlot = [1, nLoadSteps]

mVec = matFint[:]
dofM = 3
# mVec = hcat([i[dofM] for i in matFint[elem]])

figsM = BendingMomentPlot(timesPlot, StrMesh, strPlots, matFint)

stop
#=
# convergence analysis
κₚ = 0.4 # 1/m
δκ = 4e-2
kappaVecElem = kappaHistElem[elem, :]
idx = maximum(findall(x -> x <= δκ, (abs.(kappaVecElem .- κₚ))))

kappa_i = kappaVecElem[idx]
M_i = abs(mVec[idx])

if kappa_i <= kappae
    M_a = E * StrSections.Iy * kappa_i
elseif kappa_i <= kappa_ast
    M_a = σY * b * h^2 / 12 * (3 - kappae^2 / kappa_i^2 + kappa_i / kappae * C / E * (2 - 3 * kappae / kappa_i + kappae^3 / kappa_i^3))
else
    zy = epsY / kappa_i
    z0 = eps_ast / kappa_i
    zs = z0 - zy
    M_a = 2 * zy^2 * σY * b / 3 + zs * σY * b * (zy + (z0 - zy) / 3)
end

err = (M_i - M_a) / M_a * 100

println(kappa_i)
println(M_i)
println(M_a)
println(err)
=#
# P-δ plot  
# --------------------------------
figPdelta = plot(dVec, pVec, markershape=:circle, lw=lw, ms=ms, title="P-δ", label="FEM", minorgrid=1, draw_arrow=1)
xlabel!("δ")
ylabel!("P")

savefig(figPdelta, "ejemplo3P-d.png")

# mNum & kappa

mNum = "mNum10.txt"
f = open(mNum, "w")

for i in mVec
    println(f, abs(i))
end

close(f)

kappa = "kappa10.txt"
f = open(kappa, "w")

for i in kappaHistElem[elem, :]
    println(f, i)
end

close(f)

errVec = [5.65, 4.8, 4.26, 4.13]
ne = [20, 40, 80, 100]

#xs = range(0, 150, step=1)
#p = fit(ne, errVec, 3)

figErr = plot(ne, errVec, markershape=:circle, lw=lw, ms=ms, title="err-nₑ", label="err-nₑ", minorgrid=1, draw_arrow=1)
#plot!(figErr, xs, p.(xs), markershape=:circle, lw=lw, ms=ms, label="Fit")
xlabel!("nₑ")
ylabel!("err")

savefig(figErr, "ejemplo3err.png")
#=
# conv

M20 = [0.0
    0.00999999994217036
    4.871111111062156
    9.732222222164006
    14.59333333327477
    19.45444444438955
    24.31555555550228
    29.176666666622825
    34.03777777772094
    38.898888888838286
    43.74534236654305
    48.14360912556634
    51.599076277766606
    54.18913983080801
    56.139885664712956
    57.62119974816517
    58.75172919641939
    59.59421618696082
    60.20747548744766
    60.62965472150604
    60.8868191051744
    60.96667812489947
    60.97673077586812
    60.89951659217219
    60.736236469664014
    60.53457158620608
    60.30976624021698
    60.0794015702734
    59.84205604499748
    59.602166149752385
    59.359849479309965
    59.114687156249126
    58.868339393121076
    58.621135278246854
    58.37493716463694
    58.12574832660906
    57.87361489146044
    57.61977079285094
    57.36446385015404
    57.10672046031153]

M40 = [0.0
    0.00999999933653657
    9.220526315200988
    18.431052630912898
    27.641578946793967
    36.852105262542686
    45.83060694346183
    51.8055879617501
    55.3338152335144
    57.5353568155519
    58.95647620600646
    59.88800838497955
    60.43150256495924
    60.54934522996158
    60.307277274277624
    59.752671638250895
    59.19957048964319
    58.65215256948478
    58.112921466165666
    57.581601491547815
    57.043374911325984
    56.49865867974788
    55.954108936483784
    55.41121313057628
    54.867367715339896
    54.32558027210426
    53.78708842561188
    53.250764133086015
    52.71552276180092
    52.18170885440205
    51.65021790887017
    51.11967113435497
    50.590140460357304
    50.06157461380379
    49.53248493757283
    49.00329109760713
    48.47363584796984
    47.94398006105056
    47.41450557222224
    46.88531424525837]

M80 = [0.0
    0.009999979435915912
    3.5997435696897155
    7.189487159352823
    10.779230748990527
    14.36897433882421
    17.95871792849995
    21.548461518375355
    25.1382051080768
    28.727948697876478
    32.317692287388546
    35.90743587721549
    39.49717946683564
    43.06990205657596
    46.16602479818648
    48.61996745962003
    50.58911738178606
    52.18650794632039
    53.49971020890984
    54.612994115260925
    55.51783879101886
    56.3058858915912
    56.973445459337825
    57.525252386395394
    58.02269480738557
    58.45155979923116
    58.80759511009216
    59.11769542070139
    59.39620535357356
    59.64010287224477
    59.82864796237829
    59.993633302098814
    60.146091286605454
    60.28253507959832
    60.36080797747587
    60.35147776298628
    60.31914201747978
    60.1682130559816
    59.839350559956145
    59.5109994515823
    59.20641356068561
    58.93203391770478
    58.677713349454436
    58.432089707719165
    58.18901782685355
    57.95025335864948
    57.71606165495926
    57.483420630587915
    57.25198834833811
    57.02284501277218
    56.79420710088819
    56.564258182264396
    56.33457754672823
    56.10539615295595
    55.87643366583309
    55.64935585508318
    55.422589735559725
    55.197665331991594
    54.97305891518541
    54.749049682447094]

M100 = [0.0
    0.010000002909305502
    2.2421428599471462
    4.474285717176982
    6.706428574112417
    8.938571431390484
    11.170714288598907
    13.402857145753941
    15.635000002770706
    17.867142860042275
    20.099285716909638
    22.331428574273406
    24.563571431426546
    26.79571428847789
    29.027857145666793
    31.260000002925732
    33.49214286008494
    35.724285717147815
    37.956428574124566
    40.18857143122511
    42.41771132581508
    44.48906373160207
    46.2758567168751
    47.81681964441702
    49.161443988328465
    50.338901350881976
    51.37131681705091
    52.28622679467085
    53.09951884498633
    53.81868742526395
    54.47278519247758
    55.05084801396974
    55.568222914612164
    56.04201717158293
    56.480835639910936
    56.861525758691435
    57.20557098162926
    57.52310811970479
    57.82010676299926
    58.10055217111941
    58.34873272327641
    58.56434203453848
    58.76097412515873
    58.94247192846999
    59.1137772982214
    59.27841229665164
    59.435404904519764
    59.57542349658318
    59.691282319826065
    59.79471262282596
    59.89161450337973
    59.98355378976829
    60.06773391731937
    60.14794606773943
    60.22276963472311
    60.2889149532067
    60.330614425597574
    60.32834617962238
    60.304140606806946
    60.27900007272328
    60.21200431109567
    59.97694972741164
    59.724936993417536
    59.48805233572667
    59.27325432787554
    59.075379561002194
    58.89135849762158
    58.71762807577761
    58.55274744005033
    58.392156162152034
    58.24201175554706
    58.08546468602904
    57.93162938113901
    57.779334293744135
    57.62944349558251
    57.48094094464664
    57.3336422812789
    57.186645499875375
    57.04062038394963
    56.89580632651399
    56.75040712073688
    56.60381551218082
    56.45686414983451
    56.31042748749401
    56.16441932365654
    56.01934033476914
    55.8738685349734
    55.72945402676862
    55.58613395197273
    55.4429210906432]

kappa20 = [0.0
    5.714285681240215e-6
    0.0027834920634640936
    0.005561269841236584
    0.008339047619014167
    0.011116825396794044
    0.013894603174572754
    0.01667238095235593
    0.019450158730126274
    0.02222793650790762
    0.02507486073522302
    0.02865615459553749
    0.032923344123842534
    0.03778369537594819
    0.04337364439799236
    0.04993962102061407
    0.05753638250820617
    0.06705554133195939
    0.0786649077471143
    0.09292065157615703
    0.11050304743222132
    0.1323777423847751
    0.1551746587264441
    0.17974884974479372
    0.20571348476334272
    0.23178731103377861
    0.25759483023737645
    0.2828603079962488
    0.3077135778024846
    0.33230111071474566
    0.3566278962055547
    0.38079896877700137
    0.4048657625311259
    0.42885588550405873
    0.4527174858270704
    0.4764716756571561
    0.5001595381116496
    0.5237621191086776
    0.5472812212805938
    0.5707299019877315]

kappa40 = [0.0
    5.714285335163762e-6
    0.005268872180114862
    0.010532030074807382
    0.015795187969596572
    0.02105834586431014
    0.026624994107732773
    0.033336433155575544
    0.04106575855994451
    0.05034566563522503
    0.06170401663359804
    0.07652487575757687
    0.09830602946383822
    0.14092414424790697
    0.199476670371223
    0.2650789215792343
    0.32319551097028487
    0.37801753156313056
    0.43097937500809913
    0.48224091301294314
    0.532815242585977
    0.5827537027897772
    0.6319194235873472
    0.6804352362638102
    0.7285661632139318
    0.7763180197794538
    0.8236614309739266
    0.8706754325530844
    0.917443732607937
    0.9639697344079562
    1.0102226305084943
    1.0562770725607475
    1.1022443154507426
    1.1481084805589632
    1.1939412474524171
    1.2397903809775925
    1.2856655263035737
    1.3314904725963432
    1.3772462880454872
    1.4229911726498214]

kappa80 = [0.0
    5.714273963380527e-6
    0.002056996325536984
    0.0041082783767730485
    0.006159560427994597
    0.008210842479328129
    0.01026212453057142
    0.012313406581928789
    0.014364688633186774
    0.016415970684500875
    0.018467252735650624
    0.020518534786980305
    0.02256981683819182
    0.024654192040243807
    0.026883791994014715
    0.029193511724433328
    0.03152386257573894
    0.03389654934084895
    0.03649247159382783
    0.03885359995938161
    0.04175445916359762
    0.04418149420435409
    0.047491794599199805
    0.05040297456709004
    0.052993933468417256
    0.05670393691733598
    0.061035198954965175
    0.06432144691700485
    0.06727287442531957
    0.07163873972272843
    0.07850197585936253
    0.08520435748045208
    0.0911065686599232
    0.09617388390405596
    0.1089819042575703
    0.1313580152737386
    0.1534352944031841
    0.18581089746284216
    0.2279229935392201
    0.2648249122336868
    0.2971775281101939
    0.32545891717972153
    0.35109474410062574
    0.3757000713986805
    0.3997478450489689
    0.4232590118032298
    0.4461671172762419
    0.46866394232681857
    0.49083334275531926
    0.5124938778116337
    0.5339066532342278
    0.5551584386974658
    0.5762318165731927
    0.5971485426699044
    0.6178627750234232
    0.6383757063293646
    0.6587284086435994
    0.6788722686193949
    0.698857458912863
    0.7187559595577954]

kappa100 = [0.0
    5.714287376746003e-6
    0.0012812244913983702
    0.0025567346955297048
    0.0038322448994928125
    0.005107755103651706
    0.006383265307770805
    0.007658775511859401
    0.008934285715868979
    0.01020979592002416
    0.01148530612394837
    0.012760816328156238
    0.014036326532243753
    0.015311836736273097
    0.016587346940381033
    0.017862857144529
    0.019138367348619973
    0.02041387755265592
    0.021689387756642624
    0.022964897960700087
    0.024248185301371628
    0.025603898222492042
    0.026968534854308286
    0.028372671246970155
    0.029812002353435132
    0.03115488225958152
    0.03269786782218239
    0.034043178930265004
    0.03567507825960106
    0.03714398452969389
    0.03848792791041305
    0.04031621647634561
    0.04190963267209717
    0.04336882878225615
    0.0447897721698864
    0.04692241993841565
    0.04873789465770268
    0.05039180602449195
    0.05193874140043793
    0.0534064760467925
    0.055685296032866344
    0.05836011603141793
    0.06054119738116638
    0.06246456723683864
    0.06427992576065271
    0.06602459697645921
    0.06769605379370998
    0.07023599575777636
    0.07413506954791671
    0.0782617788130838
    0.08220113020525589
    0.0857724399523907
    0.08860242270634336
    0.09120755902835112
    0.09363954744262341
    0.09690026501165595
    0.10442323583496323
    0.11891417309073024
    0.13567440000447586
    0.15090190895032943
    0.17086946391075616
    0.20530428602096393
    0.23558033373468182
    0.26196252236767026
    0.28492772911913156
    0.3056866966050624
    0.3246171680717577
    0.3421951450906852
    0.3587414153764402
    0.3748479444006141
    0.3897534012172473
    0.40519570065093446
    0.42035703004093844
    0.435275217775568
    0.44991356676176386
    0.4642860629907643
    0.47846983654051173
    0.49251013245250846
    0.5063418586058946
    0.5199772079836028
    0.5335667037449272
    0.5471582255336497
    0.5606892688250297
    0.5741389118413335
    0.5874793316876448
    0.6007089412463557
    0.6138712036301593
    0.6269289377654422
    0.639880088927247
    0.652745997954926]

figConv = plot(kappa20, M20, markershape=:circle, lw=0.5 * lw, ms=ms, title="M-κ", label="nₑ=20", minorgrid=1, draw_arrow=1, legend=:bottomright)
plot!(kappa40[1:end-18], M40[1:end-18], markershape=:circle, lw=0.5 * lw, ms=ms, title="M-κ", label="nₑ=40", minorgrid=1, draw_arrow=1)
plot!(kappa80[1:end-10], M80[1:end-10], markershape=:circle, lw=0.5 * lw, ms=ms, title="M-κ", label="nₑ=80", minorgrid=1, draw_arrow=1)
plot!(kappa100[1:end-6], M100[1:end-6], markershape=:circle, lw=0.5 * lw, ms=ms, title="M-κ", label="nₑ=100", minorgrid=1, draw_arrow=1)
xlabel!("κ")
ylabel!("M")
savefig(figConv, "ejemplo3conv.png")
=#